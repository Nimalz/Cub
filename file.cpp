
/******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "file.h"
#include "score.h"
#include "title.h"
#include "sound.h"
#include "showinput.h"
/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
SAVEDATA	save;					// セーブデータ作成場所
static BOOL g_Loadcheck = FALSE;	//読み込み成功？

/*******************************************************************************
関数名:	void SaveData( void )
引数:	void
戻り値:	void
説明:	セーブデータを作成し、ファイルへ出力する
*******************************************************************************/
void SaveData(void)
{

	//クレアしたstageを記録
	if (*GetStageClear() > *GetStage())
	{
		save.stage = *GetStageClear();
	}
	else
	{
		save.stage = *GetStage();
	}
	if (save.stage)
	{
		save.cursor = 1;
	}
	else {
		save.cursor = 0;
	}
	{
		save.vm = GetVolume()->master;
		save.vb = GetVolume()->BGM;
		save.vs = GetVolume()->SE;
	}
	{
		save.SI = *GetShowSI();
	}
	// セーブデータのチェックサムを求める
	{
		char* adr = (char*)&save;	// デーブデータの先頭アドレスをadrに入れる
		int  sum = 0;				// 計算するチェックサム

		save.sum = 0;				// セーブデータ側のチェックサムを０でクリアしていく

		for (int i = 0; i < sizeof(SAVEDATA); i++)
		{
			sum += adr[i];
		}

		save.sum = sum;
	}



	// SAVEDATA構造体ごと全部をファイルに出力する
	FILE* fp;

	printf("\nセーブ開始・・・");
	fp = fopen("savedata.bin", "wb");			// ファイルをバイナリ書き込みモードでOpenする

	if (fp != NULL)								// ファイルがあれば書き込み、無ければ無視
	{
		fwrite(&save, 1, sizeof(SAVEDATA), fp);	// 指定したアドレスから指定したバイト数分ファイルへ書き込む
		fclose(fp);								// Openしていたファイルを閉じる
		printf("終了！\n");
	}
	else
	{
		printf("ファイルエラー！\n");
	}

}


/*******************************************************************************
関数名:	void LoadData( void )
引数:	void
戻り値:	void
説明:	セーブデータをファイルから読み込む
*******************************************************************************/
void LoadData(void)
{
	//PLAYER *player = GetPlayer();	// プレイヤーのアドレスを取得する
	//ENEMY  *enemy  = GetEnemy();	// エネミーのアドレスを取得する

	// ファイルからセーブデータを読み込む
	FILE* fp;

	printf("\nロード開始・・・");
	fp = fopen("savedata.bin", "rb");	// ファイルをバイナリ読み込みモードでOpenする

	if (fp != NULL)						// ファイルがあれば書き込み、無ければ無視
	{
		fread(&save, 1, sizeof(SAVEDATA), fp);	// 指定したアドレスへ指定したバイト数分ファイルから読み込む
		fclose(fp);								// Openしていたファイルを閉じる
		printf("終了！\n");
		g_Loadcheck = TRUE;

	}
	else
	{
		//*GetStage() = -1;
		printf("ファイルエラー！\n");
	}

	if (g_Loadcheck)
	{
		// セーブデータのチェックサムが合っているか調べる
		{
			char* adr = (char*)&save;	// デーブデータの先頭アドレスをadrに入れる
			int  sum = 0;				// 計算するチェックサム
			int  org = save.sum;		// セーブデータ内のチェックサム

			save.sum = 0;				// セーブデータ側のチェックサムを０でクリアしていく

			for (int i = 0; i < sizeof(SAVEDATA); i++)
			{
				sum += adr[i];
			}

			// 元々のチェックサムと再計算したチェックサムが同じか調べている
			if (sum != org)
			{
				// データが改ざんされている！
				return;
			}
		}

		{
			*GetStageClear() = save.stage;
		}

		{
			*Get_g_Cursor() = save.cursor;

		}

		{
			GetVolume()->master = save.vm;
			GetVolume()->BGM = save.vb;
			GetVolume()->SE = save.vs;
		}

		{
			*GetShowSI() = save.SI;
		}
	}
	g_Loadcheck = FALSE;
}

BOOL GetLoadCheck(void)
{
	return g_Loadcheck;
}


